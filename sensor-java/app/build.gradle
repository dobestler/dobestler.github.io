/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.hidetake.ssh' version '2.10.1'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

//project.version = '1.0'
project.group = 'com.home.weatherstation'

sourceCompatibility = 1.11 // version on raspberry
targetCompatibility = 1.11 // version on raspberry

Properties p = new Properties()
File localProperties = project.rootProject.file('local.properties')
if (localProperties.exists()) {
    p.load(new FileInputStream(localProperties))
    //if (!p.hasProperty('alert.email.from') || !p.hasProperty('alert.email.password') || !p.hasProperty('alert.email.to')) {
    //    throw new IllegalStateException("Missing properties in local.properties")
    //}
} else {
    throw new IllegalStateException("local.properties could not be located")
}

buildConfig {
    appName = project.name
    version = "1.0" //project.version
    clsName = 'BuildConfig'
    packageName = project.group
    charset = 'UTF-8'

    buildConfigField "String", "ALERT_EMAIL_FROM", p['alert.email.from']
    buildConfigField "String", "ALERT_EMAIL_PASSWORD", p['alert.email.password']
    buildConfigField "String", "ALERT_EMAIL_TO", p['alert.email.to']
    buildConfigField "String", "WEBSOCKET_SERVER_SSL_CERT_FILENAME", p['websocket.server.ssl.cert.filename']
    buildConfigField "String", "WEBSOCKET_SERVER_SSL_KEY_FILENAME", p['websocket.server.ssl.key.filename']
    buildConfigField "String", "WEBSOCKET_SERVER_SSL_JKS_PASSWORD", p['websocket.server.ssl.jks.password']
}

remotes {
    raspberry {
        host = p['remote.host.address']
        user = p['remote.host.user']
        password = p['remote.host.password']
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = uri("https://jitpack.io") }
    jcenter()
}


dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'org.hidetake:gradle-ssh-plugin:2.10.1'

    implementation "ch.qos.logback:logback-core:+"
    implementation "ch.qos.logback:logback-classic:+"
    implementation "com.github.weliem.blessed-bluez:blessed:0.40"
    implementation 'com.github.hypfvieh:dbus-java:3.3.0'
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation 'org.quartz-scheduler:quartz:2.3.2'

    // SMN API Code
    implementation 'joda-time:joda-time:2.9.4'

    // Google Bigquery API
    implementation('com.google.cloud:gcloud-java-bigquery:0.2.8') {
        //exclude group: 'com.google.api-client', module: 'google-api-client-appengine'
        exclude group: 'io.grpc'
    }

    implementation 'javax.mail:mail:1.5.0-b01'

    implementation 'commons-io:commons-io:2.7'

    //websocket connection for 'push to scan' from client
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
}

application {
    // Define the main class for the application.
    mainClass = 'com.home.weatherstation.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.home.weatherstation.App'
    }
}

task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.home.weatherstation.App'
    }
    //baseName = project.name + '-all'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            {
                exclude "META-INF/*.SF"
                exclude "META-INF/*.DSA"
                exclude "META-INF/*.RSA"
            }
    with jar
}

task deployAndRestart {
    doLast {
        ssh.run {
            session(remotes.raspberry) {
                def jarname = "app.jar" //"app-$project.version" + ".jar"
                println "Stopping running process ..."
                try {
                    def pid = execute "pgrep -f $jarname" // app-*.jar
                    println "Stopping $pid ..."
                    execute "kill $pid"
                    println "Process stopped"
                } catch(e) {
                    println "Process seemed not to be running: $e"
                }

                println "Uploading jar ..."
                put from: "$projectDir/build/libs/$jarname", into: "Applications/Weatherstation"

                // Start app
                println "Starting app ..."
                execute "cd Applications/Weatherstation; nohup java -jar $jarname < /dev/null > /dev/null 2> /dev/null &"
                //assert ...is running
            }
        }
    }
}

// workaround for issue with de.fuerstenau.buildconfig
// https://github.com/mfuerstenau/gradle-buildconfig-plugin/issues/30
configurations {
    create("compile")
}

apply plugin: 'org.hidetake.ssh'
apply plugin: 'java'